/*
 * File: app/controller/MyController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.MyController', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "button": {
                tap: 'onButtonTap'
            }
        }
    },

    onButtonTap: function(button, e, options) {


        var testPanel = Ext.getCmp('testPanel');


        var keyboard = Ext.getCmp("keyboardFittsLaw");

        if(keyboard == null || typeof keyboard == 'undefined'){
            keyboard = Ext.getCmp("keyboard");
            //console.info('defaultkeybopard');
        }else{
            //console.info('fitts');
        }
        if(keyboard != null && typeof keyboard != 'undefined'){
            var outputfield = keyboard.getComponent('outputPanel').getComponent('outputfield');

        }

        // SHIFT-BUTTON
        if(button.getItemId().search(/keyboardShift.+/)!=-1){


            var qwert = keyboard.getComponent('leftKeyboard').getComponent("qwertPanel").items.items;
            var asdfg = keyboard.getComponent('leftKeyboard').getComponent("asdfgPanel").items.items;
            var shzxcv = keyboard.getComponent('leftKeyboard').getComponent("shzxcvPanel").items.items;
            var yuiop = keyboard.getComponent('rightKeyboard').getComponent("yuiopPanel").items.items;
            var hjkl = keyboard.getComponent('rightKeyboard').getComponent("hjklPanel").items.items;
            var bnmsh = keyboard.getComponent('rightKeyboard').getComponent("bnmshPanel").items.items;

            if(keyboard.shift){
                keyboard.shift = false;

                for(var i = 0;i<qwert.length;i++){
                    qwert[i].setText(qwert[i].getText().toLowerCase());
                    asdfg[i].setText(asdfg[i].getText().toLowerCase());
                    shzxcv[i].setText(shzxcv[i].getText().toLowerCase());
                    yuiop[i].setText(yuiop[i].getText().toLowerCase());
                }

                for(var i = 0;i<hjkl.length;i++){
                    hjkl[i].setText(hjkl[i].getText().toLowerCase());
                    bnmsh[i].setText(bnmsh[i].getText().toLowerCase());

                }

            }else{
                keyboard.shift = true;


                for(var i = 0;i<qwert.length;i++){
                    qwert[i].setText(qwert[i].getText().toUpperCase());
                    asdfg[i].setText(asdfg[i].getText().toUpperCase());
                    shzxcv[i].setText(shzxcv[i].getText().toUpperCase());
                    yuiop[i].setText(yuiop[i].getText().toUpperCase());
                }

                for(var i = 0;i<hjkl.length;i++){
                    hjkl[i].setText(hjkl[i].getText().toUpperCase());
                    bnmsh[i].setText(bnmsh[i].getText().toUpperCase());

                }

            }



            // BACKSPACE-BUTTONS
        }else if(button.getItemId().search(/keyboardBackSpace/)!=-1){

            //todo handle backspace
            var typedWord = outputfield.getValue().substring(0,outputfield.getValue().length-1);
            outputfield.setValue(typedWord);

            var iscorrect = testPanel.check(typedWord);
            if(iscorrect){
                outputfield.setStyle("background-color: transparent;");
            }else{
                outputfield.setStyle("background-color: #F05050;");
            }


            // SPACE-BUTTONS
        }else if(button.getItemId().search(/keyboardSpace.+/)!=-1){

            //leere schreibfeld
            var word = outputfield.getValue();
            outputfield.setValue("");

            testPanel.characterCounter++; // zÃ¤hle leertaste als character
            testPanel.counter(word);

            console.info('errorcounter: '+testPanel.characterErrorCounter);
            console.info('charcounter:' +testPanel.characterCounter);

            outputfield.setStyle("background-color: transparent;");    

            // CHARACTER-BUTTONS
        }else if(button.getItemId().search(/keyboard.+/)!=-1){



            // schreibe in das outputfield den text des buttons
            var typedChar = button.getText();
            var typedWord = outputfield.getValue();
            typedWord = typedWord + typedChar;

            outputfield.setValue(typedWord);

            var testPanel = Ext.getCmp('testPanel');
            var iscorrect = testPanel.check(typedWord);
            if(iscorrect){
                outputfield.setStyle("background-color: transparent;");
            }else{
                outputfield.setStyle("background-color: #F05050;");
            }
        }

    }

});