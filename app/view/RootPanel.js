/*
 * File: app/view/RootPanel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.RootPanel', {
    extend: 'Ext.Panel',

    requires: [
        'MyApp.view.StartPanel',
        'MyApp.view.TestPanel'
    ],

    config: {
        ui: '',
        layout: {
            animation: 'fade',
            type: 'card'
        },
        scrollable: false,
        listeners: [
            {
                fn: 'onPanelShow',
                event: 'show'
            }
        ],
        items: [
            {
                xtype: 'startpanel'
            },
            {
                xtype: 'testpanel'
            }
        ]
    },

    onPanelShow: function(component, options) {
        // Prüfe OS
        var validOs = ["iOS","iPad","iPhone","iPod","Android"];
        var osName = Ext.os.name;
        var isValidOs = (validOs.indexOf(osName) != -1);
        if(!isValidOs){
            Ext.Msg.alert('Device not valid', 'Sorry, you need a tablet with iOS or Android!', function(){
                // Bye
            }, this);

            return;
        }

        // Prüfe Auflösung
        var minsize = [960, 440];
        var width = (window.innerWidth > 0) ? window.innerWidth : screen.width;
        var height = (window.innerHeight > 0) ? window.innerHeight : screen.height;
        var isValidSize = (minsize[0] <= width && minsize[1] <= height);
        if(!isValidSize){
            Ext.Msg.alert('Screen too small', 'Sorry, you need a tablet with a larger screen!', function(){
                // Bye
            }, this);

            return;
        }

        if(facebook.userId == 0){
            // show Login-Window
            Ext.Msg.alert('', 'Welcome!<br/>Continue to facebook login?', function(){
                document.location.href = facebook.loginUrl;
            }, this);
        }else{

            if(appState.userknown){
                // show Introduction-Window
                Ext.Msg.alert('', 'Sorry, ' + facebook.username + ' you have done this already.', function(){
                    // show bye-site
                }, this);    
            }else{
                // show Introduction-Window
                Ext.Msg.alert('', 'Hi ' + facebook.username + '! Thanks for visiting. Let\'s start?', function(){
                    this.showIntroduction(1);
                }, this);        
            }
        }
    },

    showIntroduction: function(step) {
        if(step == 1){
            Ext.Msg.alert('Introduction', 'Please hold your tablet in landscape with both hands. Use only your thumbs for interacting. Let\'s start?', function(){
                this.showIntroduction(2);
            }, this);
        }else if(step == 2){
            this.startTest();
        }

    },

    startTest: function() {
        this.doStep(0);
    },

    doStep: function(number) {

        // Define Functions, used in timeline
        var executeTest = function(){
            this.setActiveItem(1);
            var testpanel = this.getActiveItem();

            var task = new Ext.util.DelayedTask(function() {
                var usermsg = 'You wrote ' + testpanel.characterCounter + ' characters and made ' + 
                testpanel.characterErrorCounter + ' mistakes.';

                // speichere Test-Ergebnisse für späteren Upload
                if(!this.testresults){
                    this.testresults = new Array();
                }
                this.testresults.push({
                    'characters': testpanel.characterCounter,
                    'errors': testpanel.characterErrorCounter
                });

                Ext.Msg.alert('Well done!', usermsg, function(){
                    this.doStep(++number);
                }, this);            
            }, this);


            Ext.Msg.alert('Let\'s start!', 'ready?', function(){
                task.delay(60000);
                testpanel.startTest();
            }, this);     
        };

        var setKeyboard = function(){
            this.setActiveItem(1);
            var testpanel = this.getActiveItem();

            var keyboard = (appState.firstTest == 'a') ? new MyApp.view.Keyboard() : new MyApp.view.KeyboardFittsLaw();
            testpanel.setKeyboard(keyboard);

            this.doStep(++number);
        };   

        var changeKeyboard = function(){
            this.setActiveItem(1);
            var testpanel = this.getActiveItem();

            var keyboard = (appState.firstTest == 'a') ? new MyApp.view.KeyboardFittsLaw() : new MyApp.view.Keyboard();
            testpanel.setKeyboard(keyboard);     

            Ext.Msg.alert('Replace the Keyboard', 'Will you do it even better? Let\'s see!', function(){
                this.doStep(++number);
            }, this);             
        };

        var uploadUsageInformation = function(){
            Ext.Msg.alert('', 'Thats all. Now we will upload your usage information.', function(){
                this.uploadData(function(response){
                    this.doStep(++number);
                }, this);
            }, this);          
        };

        var postOnFacebook = function(){
            Ext.Msg.confirm('', 'Tell your friends on Facebook! Ok?', function(btn){
                if(btn == 'yes'){
                    this.postOnFacebook(function(response){
                        this.doStep(++number);
                    }, this);
                }else{
                    this.doStep(++number);
                }
            }, this)
        };


        var resultsum = function(){
            var resultsum = this.calculateSumResult();
            Ext.Msg.alert('Your overall score', 'You wrote ' + resultsum['characters'] + ' characters and made ' + resultsum['errors'] + ' mistakes within one minute.', function(){
                this.doStep(++number);
            }, this);      
        };

        var goodbye = function(){
            Ext.Msg.alert('Finished!', 'Thank you for your support! Goodbye!', function(){
                this.setActiveItem(0);
            }, this);      
        };

        // Define timeline
        var timeline = [
        setKeyboard,
        executeTest,
        executeTest,
        executeTest,
        changeKeyboard,
        executeTest,
        executeTest,
        executeTest,
        resultsum,
        uploadUsageInformation,
        postOnFacebook,
        goodbye
        ];

        // find and execute current neccessary function
        var currentFunction = timeline[number];
        currentFunction.apply(this, []);
    },

    uploadData: function(callback, scope) {
        var width = (window.innerWidth > 0) ? window.innerWidth : screen.width;
        var height = (window.innerHeight > 0) ? window.innerHeight : screen.height;

        Ext.Ajax.request({
            url: 'upload.php',
            params: {
                test11Characters: this.testresults[0]['characters'],
                test11Errors: this.testresults[0]['errors'],

                test12Characters: this.testresults[1]['characters'],
                test12Errors: this.testresults[1]['errors'],

                test13Characters: this.testresults[2]['characters'],
                test13Errors: this.testresults[2]['errors'],

                test21Characters: this.testresults[3]['characters'],
                test21Errors: this.testresults[3]['errors'],

                test22Characters: this.testresults[4]['characters'],
                test22Errors: this.testresults[4]['errors'],

                test23Characters: this.testresults[5]['characters'],
                test23Errors: this.testresults[5]['errors'],

                screenresolution: width + 'x' + height
            },
            success: callback,
            scope: scope
        });


    },

    postOnFacebook: function(callback, scope) {
        var resultsum = this.calculateSumResult();
        Ext.Ajax.request({
            url: 'postOnFacebook.php',
            params: resultsum,
            success: callback,
            scope: scope
        });

    },

    calculateSumResult: function() {
        var characters = 0;
        var errors = 0;


        for(var i = 0; i<=5; i++){
            characters += this.testresults[i]['characters'];
            errors += this.testresults[i]['errors'];
        }

        characters = Math.round(characters/6);
        errors = Math.round(errors/6);


        return {'characters': characters, 'errors': errors};
    }

});